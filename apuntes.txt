Conoce todo el potencial de Flask como framework web de Python, integraciones con Bootstrap, GCloud, What The Forms y más. <br>
Flask es sencillo de aprender, tiene una documentación clara y práctica, es rápido a la hora de renderizar puede ser hasta tres veces más rapido que Django. También es fácil de realizar una API REST, la estructura de un proyecto es flexible y es ideal para aprender desarrollo web con un framework de Python.<br>
¿Cómo funcionan las aplicaciones web?
Cuando utilizas una aplicación web puedes interactuar con ella desde una computadora hasta un dispositivo móvil, pero esto no quiere decir que consume el procesamiento de tu dispositivo. Todo lo contrario, se hace en una red de servidores.

Estos servidores unen su poder de procesamiento con el fin transmitir solicitudes a todo el mundo, a su vez utilizar servidores especializados para almacenar los datos con los cuales se está trabajando, así como los datos de los demás usuarios. Como todo esto sucede sin demora alguna, parecerá que la aplicación se está ejecutando de forma nativa en tu dispositivo.

El servidor procesa la información obtenida por el navegador, luego se realizan los procedimientos necesarios de acuerdo a la lógica de negocio de la aplicación para regresar la información solicitada al cliente.

Ejemplo:

Cuando utilizamos Google Drive el cual es una aplicación web y abrimos un documento con Google Docs, el navegador se comunica con los servidores para ver y editar el documento.

A medida que vayas editando el documento, tu navegador trabajará de la mano con los servidores para asegurarse que todos los cambios se estén guardando.

Ventajas:

Muchas de las aplicaciones web que existen son gratuitas.
Puedes acceder a tu información en cualquier momento y lugar.
No dependes de un dispositivo en específico ya que la aplicación se encuentra almacenada en la web.

¿Qué es Flask?
En esta clase el profesor Bernardo Cassina nos explica cómo podemos usar Flask para desarrollar aplicaciones web escritas en Python con este framework.

Flask es un framework minimalista escrito en Python que permite crear aplicaciones web rápidamente y con un mínimo de líneas de código, busca que su infraestructura inicial sea lo más simple posible y pueda personalizarse fácilmente, puedes extender sus funcionalidades con las llamadas Flask Extensions http://flask.pocoo.org/extensions/

Esta es la guía para configurar nuestro ambiente con Python 3.
Por lo general Mac ya incluye una instalación de Python, la puedes verificar ejecutando los siguientes comandos en una terminal:

python --version
python3 --version
Debemos asegurarnos de tener python 3. Para instalar Python puedes seguir el siguiente enlace y después regresar a esta lectura.

https://platzi.com/clases/1378-python/14289-guia-de-instalacion-y-conceptos-basicos/

Instalación en Windows
Una vez que instalaste python 3 desde python.org vamos a verificar que también incluimos pip en esta instalación. Después debes correr el siguiente comando para instalar virtualenv:

pip install virtualenv
El sistema debe haber instalado virtualenv y ahora podemos comenzar con el curso.

Instalación en Mac
Si ya instalaste python 3 ahora corre el siguiente comando para instalar pip:

sudo easy_install pip
Para install virtualenv de manera global corre:

pip install virtualenv
El sistema debe haber instalado virtualenv y ahora podemos comenzar con el curso.

Hello World Flask
Estos son los conceptos principales que debes entender antes de hacer un Hello World en Flask:

virtualenv: es una herramienta para crear entornos aislados de Python.

pip: es el instalador de paquetes para Python.

requirements.txt: es el archivo en donde se colocará todas las dependencias a instalar en nuestra aplicación.

FLASK_APP: es la variable para identificar el archivo donde se encuentra la aplicación.
Para crear la variable de entorno hay que ejecutar:
En linux: export FLASK_APP=main.py
En Windows: set FLASK_APP=main.py

Debugging en Flask
Debugging: es el proceso de identificar y corregir errores de programación.

Para activar el debug mode escribir lo siguiente en la consola:

En linux: export FLASK_DEBUG=1
En window: set FLASK_DEBUG=1

echo $FLASK_DEBUG
Logging: es una grabación secuencial en un archivo o en una base de datos de todos los eventos que afectan a un proceso particular.

Se utiliza en muchos casos distintos, para guardar información sobre la actividad de sistemas variados.

Tal vez su uso más inmediato a nuestras actividades como desarrolladores web sería el logging de accesos al servidor web, que analizado da información del tráfico de nuestro sitio. Cualquier servidor web dispone de logs con los accesos, pero además, suelen disponer de otros logs, por ejemplo, de errores.

Los sistemas operativos también suelen trabajar con logs, por ejemplo para guardar incidencias, errores, accesos de usuarios, etc.

A través de el logs se puede encontrar información para detectar posibles problemas en caso de que no funcione algún sistema como debiera o se haya producido una incidencia de seguridad.

Una vez que hayas levantado todo tu servidor a mano, posteriormente lo puedes automatizar así:

#!/bin/bash

source venv/bin/activate

export FLASK_APP=main.py
export FLASK_DEBUG=1

flask run

1 - Copia el código en un nuevo archivo dentro de la raíz de tu proyecto
2 - Guarda el archivo con extension .sh
3 - Ejecuta desde la consola con el comando: source file_name.sh
Listo!, Cada vez que quieras levantar el servidor de Flask solo haz el paso 3

